/*
 */
package pl.edu.netbeans.visualization;

import java.awt.BorderLayout;
import java.util.logging.Logger;
import javax.swing.JButton;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import prefuse.Visualization;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//pl.edu.netbeans.visualization//FitnessGraph//EN",
autostore = false)
public final class FitnessGraphTopComponent extends TopComponent implements LookupListener {

    private static FitnessGraphTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "FitnessGraphTopComponent";
    private Visualization vis = null;
    int panelHeight, panelWidth;

    /** The time series data. */
    private TimeSeries series;
    /** Ostatnio dodana wartość */
    private double lastValue = 0;

    public FitnessGraphTopComponent() {
        initComponents();
//        initGraph();


        setName(NbBundle.getMessage(FitnessGraphTopComponent.class, "CTL_FitnessGraphTopComponent"));
        setToolTipText(NbBundle.getMessage(FitnessGraphTopComponent.class, "HINT_FitnessGraphTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
    }

    /**
     * Constructs a new demonstration application.
     *
     * @param title  the frame title.
     */
    public void setupGraph() {

        this.series = new TimeSeries("Random Data", Millisecond.class);
        final TimeSeriesCollection dataset = new TimeSeriesCollection(this.series);
        final JFreeChart chart = createChart(dataset);

        final ChartPanel chartPanel = new ChartPanel(chart);
        final JButton button = new JButton("Add New Data Item");
        button.setActionCommand("ADD_DATA");
//        button.addActionListener(this);

        this.add(chartPanel);
        this.add(button, BorderLayout.SOUTH);
        this.setPreferredSize(new java.awt.Dimension(500, 270));
    }

    /**
     * Creates a sample chart.
     *
     * @param dataset  the dataset.
     * @return A sample chart.
     */
    private JFreeChart createChart(final XYDataset dataset) {
        final JFreeChart result = ChartFactory.createTimeSeriesChart(
                "Dynamic Data Demo",
                "Time",
                "Value",
                dataset,
                true,
                true,
                false);
        final XYPlot plot = result.getXYPlot();
        ValueAxis axis = plot.getDomainAxis();
        axis.setAutoRange(true);
        axis.setFixedAutoRange(60000.0);  // 60 seconds
        axis = plot.getRangeAxis();
        axis.setRange(0.0, 200.0);
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();

        jTextField1.setText(org.openide.util.NbBundle.getMessage(FitnessGraphTopComponent.class, "FitnessGraphTopComponent.jTextField1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(281, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized FitnessGraphTopComponent getDefault() {
        if (instance == null) {
            instance = new FitnessGraphTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the FitnessGraphTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized FitnessGraphTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(FitnessGraphTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof FitnessGraphTopComponent) {
            return (FitnessGraphTopComponent) win;
        }
        Logger.getLogger(FitnessGraphTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    private void initGraph() {
//        vis = new Visualization();
//
//
//        graph = new Graph();
//        graph.addColumn("x", int.class);
//        graph.addColumn("y", int.class);
//
//        Node n1 = graph.addNode();
//        n1.setInt("x", 0);
//        n1.setInt("y", 10);
//
//        Node n2 = graph.addNode();
//        n1.setInt("x", 10);
//        n1.setInt("y", 30);
//
//        Node n3 = graph.addNode();
//        n1.setInt("x", 20);
//        n1.setInt("y", 5);
//
//        graph.addEdge(n1, n2);
//        graph.addEdge(n2, n3);
//
//
//
//        Renderer nodeR = new ShapeRenderer(20);
//        // draw aggregates as polygons with curved edges
//        Renderer polyR = new PolygonRenderer(Constants.POLY_TYPE_CURVE);
//        ((PolygonRenderer) polyR).setCurveSlack(0.15f);
//
//        DefaultRendererFactory drf = new DefaultRendererFactory();
//        drf.setDefaultRenderer(nodeR);
////        drf.add("ingroup('aggregates')", polyR);
//        drf.add("TRUE", polyR);
//        vis.setRendererFactory(drf);
//
//        vis.add("graph", graph);
//
//
//        ActionList layout = new ActionList(Activity.INFINITY);
//        layout.add(new SpecifiedLayout(nodes, "x", "y"));
//        layout.add(new RepaintAction());
//
//
//
//        ColorAction text = new ColorAction(nodes, VisualItem.TEXTCOLOR, ColorLib.gray(0));
//        ColorAction fill = new ColorAction(nodes, VisualItem.FILLCOLOR, ColorLib.rgb(200, 200, 255));//kolor Node'ów
//        ColorAction dataMarked = new ColorAction(nodes, VisualItem.FILLCOLOR, ColorLib.red(100));
//
//        ActionList color = new ActionList(Activity.INFINITY);
//        color.add(fill);
//        color.add(text);
//        color.add(dataMarked);
//
//        // add the actions to the visualization
//        vis.putAction("color", color);
//        vis.putAction("layout", layout);
//
//
//        Display display = new Display(vis);
//        display.pan(300, 300);
//
//        add(new MyAggregateDemo());
//
//
//        vis.run("color");  // assign the colors
//        vis.run("layout"); // start up the animated layout
//
//        revalidate();
//        repaint();
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result res = (Lookup.Result) ev.getSource();
        if (res == null) {
            System.err.println("null Lookup.Result in FitnessGraph...");
            return;
        }

        jTextField1.setText("" + res.allItems());
    }
}
