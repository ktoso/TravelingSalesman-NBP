/*
 */
package pl.edu.netbeans.visualization;

import java.awt.BorderLayout;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.time.TimeSeries;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import prefuse.Visualization;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//pl.edu.netbeans.visualization//FitnessGraph//EN",
autostore = false)
public final class FitnessGraphTopComponent extends TopComponent implements LookupListener {

    private static FitnessGraphTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "FitnessGraphTopComponent";
    private Visualization vis = null;
    int panelHeight, panelWidth;
    /** The time series data. */
    private TimeSeries series;
    /** Ostatnio dodana wartość */
    private double lastValue = 0;

    public FitnessGraphTopComponent() {
        initComponents();
//        initGraph();
        setupGraph();


        setName(NbBundle.getMessage(FitnessGraphTopComponent.class, "CTL_FitnessGraphTopComponent"));
        setToolTipText(NbBundle.getMessage(FitnessGraphTopComponent.class, "HINT_FitnessGraphTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
    }

    /**
     * Constructs a new demonstration application.
     *
     * @param title  the frame title.
     */
    public void setupGraph() {

        final CategoryDataset dataset = createMockDataset();
//        final JFreeChart chart = createAreaChart(dataset);
        final JFreeChart chart = createXYChart(dataset);

        final ChartPanel chartPanel = new ChartPanel(chart);

        this.add(chartPanel, BorderLayout.NORTH);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
    }

    /**
     * Creates a sample chart.
     *
     * @param dataset  the dataset.
     * @return A sample chart.
     */
    private JFreeChart createAreaChart(final CategoryDataset dataset) {
        final JFreeChart result = ChartFactory.createAreaChart(
                "Fittnes chromosomu", "Iteracja", "Wartość",
                dataset, PlotOrientation.VERTICAL,
                true, false, false);

        result.setAntiAlias(true);

//        final JFreeChart result = ChartFactory.createTimeSeriesChart(
//                "Wykres fitness chromosomu", "Iteracja", "Wartość",
//                dataset, true, false, false);
//        final XYPlot plot = result.getXYPlot();
//        ValueAxis axis = plot.getDomainAxis();
//        axis.setAutoRange(true);
//        axis = plot.getRangeAxis();
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        debugText = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        debugText.setText(org.openide.util.NbBundle.getMessage(FitnessGraphTopComponent.class, "FitnessGraphTopComponent.debugText.text")); // NOI18N
        /*
        add(debugText, java.awt.BorderLayout.CENTER);
        */
        add(debugText, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField debugText;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized FitnessGraphTopComponent getDefault() {
        if (instance == null) {
            instance = new FitnessGraphTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the FitnessGraphTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized FitnessGraphTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(FitnessGraphTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof FitnessGraphTopComponent) {
            return (FitnessGraphTopComponent) win;
        }
        Logger.getLogger(FitnessGraphTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result res = (Lookup.Result) ev.getSource();
        if (res == null) {
            System.err.println("null Lookup.Result in FitnessGraph...");
            return;
        }

        debugText.setText("" + res.allItems());
    }

    /**
     * Zwraca przykładowe dane dla wykresu.
     * @return przykładowe dane dla wykresu.
     */
    private CategoryDataset createMockDataset() {
        // row keys...
        final String series1 = "First";
        final String series3 = "Third";

        // column keys...
        final Double type1 = 0.;
        final Double type2 = 1.;
        final Double type3 = 2.;
        final Double type4 = 3.;
        final Double type5 = 4.;
        final Double type6 = 5.;
        final Double type7 = 6.;
        final Double type8 = 7.;

        // create the dataset...
        final DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        dataset.addValue(10.0, series1, type1);
        dataset.addValue(40.0, series1, type2);
        dataset.addValue(30.0, series1, type3);
        dataset.addValue(50.0, series1, type4);
        dataset.addValue(50.0, series1, type5);
        dataset.addValue(70.0, series1, type6);
        dataset.addValue(70.0, series1, type7);
        dataset.addValue(80.0, series1, type8);

        dataset.addValue(44.0, series3, type1);
        dataset.addValue(43.0, series3, type2);
        dataset.addValue(42.0, series3, type3);
        dataset.addValue(43.0, series3, type4);
        dataset.addValue(46.0, series3, type5);
        dataset.addValue(43.0, series3, type6);
        dataset.addValue(44.0, series3, type7);
        dataset.addValue(43.0, series3, type8);

        return dataset;
    }
}
