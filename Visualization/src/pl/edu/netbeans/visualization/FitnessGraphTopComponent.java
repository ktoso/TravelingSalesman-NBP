/*
 */
package pl.edu.netbeans.visualization;

import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.ImageUtilities;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import pl.edu.netbeans.toolbox.ChartDataDTO;
import prefuse.Visualization;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//pl.edu.netbeans.visualization//FitnessGraph//EN",
autostore = false)
public final class FitnessGraphTopComponent extends TopComponent implements LookupListener {

    private static FitnessGraphTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "FitnessGraphTopComponent";
    private Visualization vis = null;
    /** The time series data. */
    private XYSeriesCollection dataset;
    private List<String> knownIDs = new ArrayList<String>(10);
    private static int calledCounter = 0;

    public FitnessGraphTopComponent() {
        initComponents();
        setupChart();

        setName(NbBundle.getMessage(FitnessGraphTopComponent.class, "CTL_FitnessGraphTopComponent"));
        setToolTipText(NbBundle.getMessage(FitnessGraphTopComponent.class, "HINT_FitnessGraphTopComponent"));
//        setIcon(ImageUtilities.loadImage(ICON_PATH, true));
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
    }

    /**
     * Constructs a new demonstration application.
     *
     * @param title  the frame title.
     */
    public void setupChart() {
        dataset = new XYSeriesCollection();
        final JFreeChart chart = createXYChart(dataset);

        final ChartPanel chartPanel = new ChartPanel(chart);

        this.add(chartPanel, BorderLayout.NORTH);
        chartPanel.setPreferredSize(new java.awt.Dimension(500, 270));
    }

    /**
     * Buduje i zwraca wykres typu XY (liniowy) odpowiednio poustawiany i poopisywany
     * @param dataset źródło danych dla tego wykresu
     * @return przygotowany do użycia wykres
     */
    private JFreeChart createXYChart(XYDataset dataset) {
        final JFreeChart result = ChartFactory.createXYLineChart(
                "Wykres fitness chromosomu", "Iteracja", "Wartość",
                dataset, PlotOrientation.VERTICAL,
                true, false, false);

        final XYPlot plot = result.getXYPlot();
        ValueAxis axis = plot.getRangeAxis();
        axis.setAutoRange(true);

        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        clearBtn = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        org.openide.awt.Mnemonics.setLocalizedText(clearBtn, org.openide.util.NbBundle.getMessage(FitnessGraphTopComponent.class, "FitnessGraphTopComponent.clearBtn.text")); // NOI18N
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(clearBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(clearBtn)
                .addContainerGap(287, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        dataset.removeAllSeries();
    }//GEN-LAST:event_clearBtnActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearBtn;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized FitnessGraphTopComponent getDefault() {
        if (instance == null) {
            instance = new FitnessGraphTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the FitnessGraphTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized FitnessGraphTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(FitnessGraphTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof FitnessGraphTopComponent) {
            return (FitnessGraphTopComponent) win;
        }
        Logger.getLogger(FitnessGraphTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID
                + "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        dataset.removeAllSeries();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    Object readProperties(java.util.Properties p) {
        if (instance == null) {
            instance = this;
        }
        instance.readPropertiesImpl(p);
        return instance;
    }

    private void readPropertiesImpl(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Lookup.Result res = (Lookup.Result) ev.getSource();
        Collection instances = res.allInstances();

        if (!instances.isEmpty()) {
            Iterator it = instances.iterator();
            while (it.hasNext()) {
                ChartDataDTO o = (ChartDataDTO) it.next();
                addDTO2Series(o);
            }

//            for (Object r : instances) {
//                if (r instanceof ChartDataDTO) {
//                    addDTO2Series((ChartDataDTO) r);
//                }
//            }

            System.out.println("" + res.allItems());
        } else {
            System.err.println("no instances in FitnessGraph...");
        }

        System.out.println("--called: " + calledCounter++ + "--");
    }

    private void addDTO2Series(ChartDataDTO chartDataDTO) {
        String id = chartDataDTO.getSimId();
        int iteration = chartDataDTO.getIteracja();
        double fitness = chartDataDTO.getFitness();

        if (!isSeriesIdKnown(id)) {
            addSeriesForId(id);
        }

        XYSeries s = dataset.getSeries(id);
        s.add(iteration, fitness);
    }

    private boolean isSeriesIdKnown(String id) {
        return knownIDs.contains(id);
    }

    private void addSeriesForId(String id) {
        dataset.addSeries(new XYSeries(id));
        knownIDs.add(id);
    }
}
